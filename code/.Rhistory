plot(btcusd, ylab="Price (in $)", main="BTC/USD Close Price")
plot(btcusd, ylab="Price (in $)", main="BTC/USD Close Price")
abline(a=NULL, b=NULL, h=0, v=NULL, ...)
plot(btcusd, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=50000)
plot(btcusd, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=30000, col="blue")
abline(h=50000)
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
library(tseries)
# import data
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-06",
after = "2019-01-01"), datetime = TRUE)
# import vector: Close Price
btcusd_close = btcusd.data[['ClosePrice']]
# import vector: Open Price
btcusd_open = btcusd.data[['OpenPrice']]
btcusd_close = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
# dates vector,
dates = btcusd.data[['CloseTime']]
# dates vector, back to string characters
string.date =  as.character(dates)
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=30000, col="blue")
abline(h=50000)
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=30000, col="red")
abline(h=50000)
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=c(30000,50000), col="red")
plot(btcusd_open, ylab="Price (in $)", main="BTC/USD Open Price")
abline(h=c(30000,50000), col="red")
# Plot of close price
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=c(30000,50000), col="red")
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
library(tseries)
# import data
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-06",
after = "2019-01-01"), datetime = TRUE)
# import vector: Close Price
btcusd_close = btcusd.data[['ClosePrice']]
# import vector: Open Price
btcusd_open = btcusd.data[['OpenPrice']]
# TIME SERIES VECTORS
btcusd_close = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
btcusd_open = ts(btcusd_open,
start = c(2019, 1, 1), frequency = 365)
# dates vector,
dates = btcusd.data[['CloseTime']]
# dates vector, back to string characters
string.date =  as.character(dates)
# Plot of close price
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=c(30000,50000), col="red")
# Plot of open price
plot(btcusd_open, ylab="Price (in $)", main="BTC/USD Open Price")
abline(h=c(30000,50000), col="red")
# Plot of close price
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=c(30000,50000), col="red")
ts.plot(btcusd_open)
# Plot of open price
plot(btcusd_open, ylab="Price (in $)", main="BTC/USD Open Price")
abline(h=c(30000,50000), col="red")
ts.plot(btcusd_open, ylab="Price (in $)")
acf2(btcusd_open)
library(astsa)
install.packages(astsa)
install.packages("astsa")
acf2(btcusd_open)
ggplotly(btcusd_close %>%
mutate(Price = BoxCox(btcusd_close$Price, lambda = BoxCox.lambda(btcusd_close$Price))) %>%
ggplot(aes(Date, Price)) + geom_line(col = '#ffa500') +
labs(title = 'Bitcoin', x = '', y = 'Price (Transformed)') + my_theme)
library(ggplotly)
auto.arima(btcusd_close)
pacf(btcusd_open, main='Partial Autocorrelations', ylab='',
ylim=c(−1, 1))
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
library(tseries)
library(astsa)
# import data
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-06",
after = "2019-01-01"), datetime = TRUE)
# import vector: Close Price
btcusd_close = btcusd.data[['ClosePrice']]
# import vector: Open Price
btcusd_open = btcusd.data[['OpenPrice']]
# TIME SERIES VECTORS
btcusd_close = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
btcusd_open = ts(btcusd_open,
start = c(2019, 1, 1), frequency = 365)
# dates vector,
dates = btcusd.data[['CloseTime']]
# dates vector, back to string characters
string.date =  as.character(dates)
# Plot of close price
plot(btcusd_close, ylab="Price (in $)", main="BTC/USD Close Price")
abline(h=c(30000,50000), col="red")
# Plot of open price
plot(btcusd_open, ylab="Price (in $)", main="BTC/USD Open Price")
abline(h=c(30000,50000), col="red")
ts.plot(btcusd_open, ylab="Price (in $)")
#y = btcusd_open
pacf(btcusd_open, main='Partial Autocorrelations', ylab='', ylim=c(−1, 1))
ts.plot(btcusd_open, ylab="Price (in $)")
abline(h=c(30000,50000), col="red")
pacf(btcusd_open, main='Partial Autocorrelations', ylab='', ylim=c(−1, 1))
install.packages("urca")
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
library(tseries)
library(astsa)
library(urca)
# import data
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-06",
after = "2019-01-01"), datetime = TRUE)
# import vector: Close Price
btcusd_close = btcusd.data[['ClosePrice']]
# import vector: Open Price
btcusd_open = btcusd.data[['OpenPrice']]
# TIME SERIES VECTORS
btcusd_close = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
btcusd_open = ts(btcusd_open,
start = c(2019, 1, 1), frequency = 365)
# dates vector,
dates = btcusd.data[['CloseTime']]
# dates vector, back to string characters
string.date =  as.character(dates)
# Time series plot of close price
ts.plot(btcusd_open, ylab="Price (in $)")
abline(h=c(30000,50000), col="red")
#y = btcusd_open
pacf(btcusd_open, main='Partial Autocorrelations', ylab='', ylim=c(−1, 1))
y = btcusd_open
acf(y, main='Autocorrelations', ylab='', ylim=c(−1, 1))
pacf(btcusd_open, main='Partial Autocorrelations', ylab='', ylim=c(-1,1)
pacf(btcusd_open, main='Partial Autocorrelations', ylab='', ylim=c(-1,1))
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
library(tseries)
library(astsa)
library(urca)
# import data
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-06",
after = "2019-01-01"), datetime = TRUE)
# import vector: Close Price
btcusd_close = btcusd.data[['ClosePrice']]
# import vector: Open Price
btcusd_open = btcusd.data[['OpenPrice']]
# TIME SERIES VECTORS
btcusd_close = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
btcusd_open = ts(btcusd_open,
start = c(2019, 1, 1), frequency = 365)
# dates vector,
dates = btcusd.data[['CloseTime']]
# dates vector, back to string characters
string.date =  as.character(dates)
# Time series plot of close price
ts.plot(btcusd_open, ylab="Price (in $)")
abline(h=c(30000,50000), col="red")
pacf(btcusd_close)
pacf(btcusd_close, ylim(-1,1))
pacf(btcusd_close, lag.max = 20, ylim(-1,1))
pacf(btcusd_close, main='Partial Autocorrelations', ylim(-1,1))
pacf(btcusd_close, main='Partial Autocorrelations')
acf(btcusd_close, main='Autocorrelations')
pacf(btcusd_close, main='Partial Autocorrelations')
acf(btcusd_close, main='Autocorrelations')
arma30 = arima(y, order=c(3, 0, 0))
View(arma30)
arma30 = arima(btcusd_close, order=c(3, 0, 0))
View(arma30)
d_btc = diff(log(btcusd_close))
plot(d_btc)
vol_btc = abs(d_btc)
plot(vol_btc)
View(btcusd.data)
# volumes of transactions
volume = btcusd.data[['Volume']]
btcusd_volume = ts(volume,
start = c(2019, 1, 1), frequency = 365)
btcusd_volume = ts(volume,
start = c(2019, 1, 1), frequency = 365)
arma30 = arima(d_btc, order=c(3, 0, 0))
View(arma30)
acf(d_btc, main='Autocorrelations')
pacf(d_btc, main='Partial Autocorrelations')
pacf(d_btc, main='Partial Autocorrelations', ylab = '', ylim = c(-1,1) )
acf(d_btc, main='Autocorrelations', ylab = '', ylim = c(-1,1) )
plot(d_btc, ylab = 'Log returns, BTCUSD')
plot(d_btc ~ dates, ylab = 'Log returns, BTCUSD')
plot(d_btc, ylab = 'Log returns, BTCUSD')
d_btc = 100*diff(log(btcusd_close))
plot(d_btc, ylab = 'Log returns, BTCUSD')
# VOLATILITY of BTCUSD, close price
vol_btc = abs(d_btc)
plot(vol_btc, ylab = 'Log returns, BTCUSD')
base_plot <- ggplot(data = vol_btc) +
geom_line(aes(x = date, y = unemploy),
color = "#09557f",
alpha = 0.6,
size = 0.6) +
labs(x = "Date",
y = "US Unemployed in Thousands",
title = "Base Plot") +
theme_minimal()
base_plot <- ggplot(vol_btc) +
geom_line(aes(x = date, y = unemploy),
color = "#09557f",
alpha = 0.6,
size = 0.6) +
labs(x = "Date",
y = "US Unemployed in Thousands",
title = "Base Plot") +
theme_minimal()
base_plot <- ggplot(vol_btc) +
geom_line(aes(x = date, y = unemploy),
color = "#09557f",
alpha = 0.6,
size = 0.6) +
labs(x = "Date",
y = "US Unemployed in Thousands",
title = "Base Plot") +
theme_minimal()
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
library(tseries)
library(astsa)
library(urca)
# import data
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-06",
after = "2019-01-01"), datetime = TRUE)
# RAW DATA, NO TIME SERIES
# import vector: Close Price
btcusd_close = btcusd.data[['ClosePrice']]
# import vector: Open Price
btcusd_open = btcusd.data[['OpenPrice']]
# volumes of transactions
volume = btcusd.data[['Volume']]
### -------------
# TIME SERIES VECTORS
btcusd_close = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
btcusd_open = ts(btcusd_open,
start = c(2019, 1, 1), frequency = 365)
btcusd_volume = ts(volume,
start = c(2019, 1, 1), frequency = 365)
# dates vector,
#dates = btcusd.data[['CloseTime']]
# dates vector, back to string characters
#string.date =  as.character(dates)
# Time series plot of close price
ts.plot(btcusd_open, ylab="Price (in $)")
abline(h=c(30000,50000), col="red")
# log difference of prices = LOG RETURNS, close price
d_btc = 100*diff(log(btcusd_close))
# VOLATILITY of BTCUSD, close price
vol_btc = abs(d_btc)
# ACF and PACF
acf(d_btc, main='Autocorrelations', ylab = '', ylim = c(-1,1) )
pacf(d_btc, main='Partial Autocorrelations', ylab = '', ylim = c(-1,1) )
plot(vol_btc, ylab = 'Volatility, BTCUSD')
View(btcusd.data)
ggplot(data = btcusd_close, aes(x = DATE, y = PRECIP)) +
geom_point() +
labs(x = "Date",
y = "Total Precipitation (Inches)",
title = "Precipitation Data",
subtitle = "Boulder, Colorado 2013")
btcusd_close_2 = btcusd.data[['ClosePrice']]
ggplot(data = btcusd_close_2, aes(x = DATE, y = PRECIP)) +
geom_point() +
labs(x = "Date",
y = "Total Precipitation (Inches)",
title = "Precipitation Data",
subtitle = "Boulder, Colorado 2013")
library(ggplot2)
library(tsbox)
library(cryptowatchR)
library(ggplot2)
options(stringsAsFactors = FALSE)
library(tseries)
library(astsa)
library(urca)
ggplot(data = btcusd_close_2, aes(x = DATE, y = PRECIP)) +
geom_point() +
labs(x = "Date",
y = "Total Precipitation (Inches)",
title = "Precipitation Data",
subtitle = "Boulder, Colorado 2013")
rlang::last_error()
# Time series plot of close price
ts.plot(btcusd_open, ylab="Price (in $)")
ggplot(data = btcusd_close, aes(x = DATE, y = PRECIP)) +
geom_point() +
labs(x = "Date",
y = "Total Precipitation (Inches)",
title = "Precipitation Data",
subtitle = "Boulder, Colorado 2013")
## ----load-libraries--------------------------------------------------
# Load packages required for entire script
library(lubridate)  #work with dates
#Set the working directory and place your downloaded data there
wd <- "~/Git/data/"
## ----read-data-csv---------------------------------------------------
# Load csv file of 15 min meteorological data from Harvard Forest
# contained within the downloaded directory, or available for download
# directly from:
# https://harvardforest.fas.harvard.edu/data/p00/hf001/hf001-10-15min-m.csv
# Factors=FALSE so strings, series of letters/words/numerals, remain characters
harMet_15Min <- read.csv(
file=paste0(wd,"NEON-DS-Met-Time-Series/HARV/FisherTower-Met/hf001-10-15min-m.csv"),
stringsAsFactors = FALSE)
## ----view-date-structure---------------------------------------------
# view column data class
class(harMet_15Min$datetime)
# view sample data
head(harMet_15Min$datetime)
## ----as-date-only----------------------------------------------------
# convert column to date class
dateOnly_HARV <- as.Date(harMet_15Min$datetime)
# view data
head(dateOnly_HARV)
## ----explore-as_date-------------------------------------------------
# Convert character data to date (no time)
myDate <- as.Date("2015-10-19 10:15")
str(myDate)
# what happens if the date has text at the end?
myDate2 <- as.Date("2015-10-19Hello")
str(myDate2)
## ----explore-POSIXct-------------------------------------------------
# Convert character data to date and time.
timeDate <- as.POSIXct("2015-10-19 10:15")
str(timeDate)
timeDate
## ----explore-POSIXct2------------------------------------------------
# to see the data in this 'raw' format, i.e., not formatted according to the
# class type to show us a date we recognize, use the `unclass()` function.
unclass(timeDate)
## ----explore-POSIXlt-------------------------------------------------
# Convert character data to POSIXlt date and time
timeDatelt<- as.POSIXlt("2015-10-19 10:15")
str(timeDatelt)
timeDatelt
unclass(timeDatelt)
## ----view-date-------------------------------------------------------
# view one date-time field
harMet_15Min$datetime[1]
## ----format-date-----------------------------------------------------
# convert single instance of date/time in format year-month-day hour:min:sec
as.POSIXct(harMet_15Min$datetime[1],format="%Y-%m-%dT%H:%M")
## The format of date-time MUST match the specified format or the data will not
# convert; see what happens when you try it a different way or without the "T"
# specified
as.POSIXct(harMet_15Min$datetime[1],format="%d-%m-%Y%H:%M")
as.POSIXct(harMet_15Min$datetime[1],format="%Y-%m-%d%H:%M")
## ----convert-column--------------------------------------------------
new.date.time <- as.POSIXct(harMet_15Min$datetime,
format="%Y-%m-%dT%H:%M" #format time
)
# view output
head(new.date.time)
# what class is the output
class(new.date.time)
## ----assign-time-zone------------------------------------------------
# assign time zone to just the first entry
as.POSIXct(harMet_15Min$datetime[1],
format = "%Y-%m-%dT%H:%M",
tz = "America/New_York")
## ----POSIX-convert-best-practice-code--------------------------------
# convert to POSIXct date-time class
harMet_15Min$datetime <- as.POSIXct(harMet_15Min$datetime,
format = "%Y-%m-%dT%H:%M",
tz = "America/New_York")
# view structure and time zone of the newly defined datetime column
str(harMet_15Min$datetime)
tz(harMet_15Min$datetime)
plot(vol_btc,dates, ylab = 'Volatility, BTCUSD')
library(TSA)
library(fUnitRoots)
library(forecast)
library(lmtest)
library(fGarch)
library(rugarch)
library(tseries)
library(tsbox)
library(cryptowatchR)
btcusd.data <- markets("btcusd", list(periods = 86400, before = "2021-06-07",
after = "2019-01-01"), datetime = TRUE)
btcusd_close = btcusd.data[['ClosePrice']]
btc.ts = ts(btcusd_close,
start = c(2019, 1, 1), frequency = 365)
plot(btc.ts, xlim=c(2019,2021), xlab="Time", ylab="Price in USD",
main="BTCUSD Price from 1/1/2019 to 07/06/2021")
min(btc.ts)
max(btc.ts)
plot(btcusd_close)
plot(btc.ts)
plot(btc.ts, xlab="Time", ylab="Price in USD",
main="BTCUSD Price from 1/1/2019 to 07/06/2021")
# Continuous compound return
r.btc = diff(log(btc.ts))*100
plot(r.bitcoin, xlab="Time", ylab="Return in %",  main="Bitcoin Return")
plot(r.btc, xlab="Time", ylab="Return in %",  main="Bitcoin Return")
plot(y = r.btc, x = zlag(r.btc), ylab="Bitcoin Price of Today (in $)",
xlab="Bitcoin Price of Yesterday (in $)", main="Plot of Autocorrelation for Lag 1")
order = ar(diff(r.btc))$order
adfTest(r.btc, lags = order,  title = NULL,description = NULL)
shapiro.test(r.btc)
diff.r.bitcoin=diff(r.btc, lag=365)
par(mfrow=c(1,2))
acf(diff.r.bitcoin, lag.max = 730,  main="Seasonal Diff. Return Series")
pacf(diff.r.bitcoin, lag.max = 730, main="Seasonal Diff. Return Series")
eacf(diff.r.bitcoin)
res = armasubsets(y=diff.r.bitcoin,nar=7,nma=7,y.name='test',ar.method='ols')
plot(res)
library("mise")
library("dplyr")
library("readxl")
library("writexl")
library("zoo")
library("xtable")
library("rdbnomics")
library("yfR")
library("bvarsv")
mise()
data(usmacro)
set.seed(5813)
# Run BVAR; save parameters
fit <- bvar.sv.tvp(usmacro, save.parameters = TRUE)
# Impulse responses
impulse.responses(fit)
View(usmacro)
setwd("~/Dropbox/Andreani_Gold_Risk/code/functions")
setwd("~/Desktop/Andreani_Giri_2023/code")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
setwd("~/Dropbox/Andreani_Gold_Risk/code/functions")
setwd("~/Desktop/Andreani_Giri_2023/code")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
View(df_de)
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
View(df_de)
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
View(df_all)
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
# Year-on-year grwth rates
dt_yoy <- yoy_gr(dt,date_col = "observation_date")
View(dt)
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
# Year-on-year grwth rates
dt_yoy <- calc_yoy(dt, date_col = "observation_date")
# Year-on-year grwth rates
dt_yoy <- calc_yoy(dt)
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
# Apply YoY to each column
for (col in cols) {
dt[, paste0(col, "_yoy") := (col / shift(col, n = 12) - 1) * 100]
}
for (col in cols) {
dt[, paste0(col, "_yoy") := (col / shift(col, 12) - 1) * 100]
}
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
View(dt)
# Keep observation_date + all columns ending with "_yoy"
dt_yoy <- dt[, c("observation_date", grep("_yoy$", names(dt), value = TRUE)), with = FALSE]
View(dt_yoy)
dt_yoy <- dt_yoy[observation_date > as.Date("1970-01-01")]
View(dt_yoy)
source("~/Desktop/Andreani_Giri_2023/code/get_data.R")
View(dt_yoy)
write_xlsx(dt_yoy, "../data/data.xlsx")
setwd("~/Documents/GIT/Andreani_Giri_2023/code")
source("~/Documents/GIT/Andreani_Giri_2023/code/get_data.R")
setwd("~/Documents/GIT/Andreani_Giri_2023/code")
source("~/Documents/GIT/Andreani_Giri_2023/code/get_data.R")
source("~/Documents/GIT/Andreani_Giri_2023/code/get_data.R")
source("~/Documents/GIT/Andreani_Giri_2023/code/get_data.R")
View(dt_yoy)
source("~/Documents/GIT/Andreani_Giri_2023/code/get_data.R")
